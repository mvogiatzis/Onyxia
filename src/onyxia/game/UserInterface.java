package onyxia.game;

import java.awt.*;
import java.awt.event.*;

import java.util.HashSet;
import java.util.StringTokenizer;
import javax.swing.*;
import javax.sound.sampled.*;
import java.io.*;

/**
 * UserInterface Class - A Class in "Onyxia" application to provide a friendly 
 * user interface to the user. This class implements graphical user interface 
 * with a Menu, Buttons, Player's image .gif, JList, Room's image panel and 
 * TextArea-TextField for output and input correspondingly. Items can be picked
 * and characters can interact with the player and the items by clicking on the
 * main panel of the class.
 * 
 * This class is part of the "Onyxia" application. 
 * 
 * "Onyxia" is a very interesting adventure game. Users can enter rooms, 
 * interact with characters and items and have fun! The game is already filled
 * with a rich functionality and can be extended easily.
 *
 * @author  Michail Vogiatzis
 * @version 1.0 (November 2011)
 */
public class UserInterface extends JFrame{

    private GameEngine engine;
    
    private ImagePanel mainpanel;
    
    
    //SoundFilePlayer used for the audio
    private SoundFilePlayer backgroundFilePlayer, soundEffectPlayer;
    
    /**
     * The boolean music mode on or off.
     */
    private boolean musicMode;
    
    //The JPanel used for the following
    private JPanel leftPanel, rightPanel, buttonsPanel, inventoryPanel, listScrollerPanel, playerpanel;
    
    //output TextArea
    private JTextArea outputTextArea;
    //input TextField
    private JTextField inputTextField;
    
    private Container contentPane;
    
    private String commandtext;
    //the image path to start the game from
    private String startingLocationURL;
    
    //The command that is generated by the buttons
    private StringBuilder commandBuilder;
    
    private KeyListener regularL;
    
    //Indicates if chat mode is enabled or disabled
    private boolean chatModeEnabled;
    
    //characters in JLabels
    private JLabel womanLabel, smallDragonLabel, genieLabel, onyxiaLabel;
    
    //items in JLabels
    private JLabel keysLabel, batLabel, swordLabel, bookLabel, chestLabel;
    
    //player in JLabel
    private JLabel playerLabel;
    
    //The icons for character and images.
    private ImageIcon charIcon, itemIcon, playerIcon;
    
    
    //Buttons that implement the commands
    private JButton goBtn, pickBtn, useBtn, talkBtn, helpBtn, musicBtn;
    
    //The JList that contains the picked items.
    private JList inventoryList;
    
    //JLabel that contains the inventory
    private JLabel inventoryLabel;
    
    //A ScrollPane for inventoryList
    private JScrollPane listScroller;
    
    //ScrollPane for output Text Area.
    private JScrollPane scrollPaneOutput;
    
    /**
     * Construct a UserInterface. As a parameter, a Game Engine
     * (an object processing and executing the game commands) is
     * needed.
     *
     * @param gameEngine  The GameEngine object implementing the game logic.
     */
    public UserInterface(GameEngine gameEngine)
    {
        engine = gameEngine;
        buttonsPanel = new JPanel();
        commandBuilder = new StringBuilder();
        
        //The text area that receives the input.
    	inputTextField = new JTextField();
        inputTextField.setToolTipText("Type in to give a command.");
        
        chatModeEnabled = false;
        
        musicMode = true; //music mode is on
        
        //starts playing the background music
        playSoundEffect(SoundType.BACKGROUNDMUSIC.getSoundType());
        
        goBtn = new JButton("go");
        //build the sub-popup menu for go button
        final JPopupMenu popup = new JPopupMenu();
        addListener(popup,"forward");
        addListener(popup,"backwards");
        addListener(popup,"right");
        addListener(popup,"left");
        addListener(popup,"up");
        addListener(popup,"down");
        
        //Now Build the listeners
        
        goBtn.addMouseListener(new MouseAdapter() {
            @Override
            public void mouseClicked(MouseEvent e)
            {
                //Execute when button is pressed
                //clear the StringBuilder
                commandBuilder.delete(0, commandBuilder.length());
                //append go value
                commandBuilder.append("go");
                inputTextField.setText(commandBuilder.toString());
                popup.show(e.getComponent(), e.getX(), e.getY());
            }
        });
        pickBtn = new JButton("pick");
            pickBtn.addMouseListener(new MouseAdapter() {
                @Override
                public void mouseClicked(MouseEvent e)
                {
                    //Execute when button is pressed
                    //clear the StringBuilder
                    commandBuilder.delete(0, commandBuilder.length());
                    //append pick value
                    commandBuilder.append("pick");
                    inputTextField.setText(commandBuilder.toString());
                }
            });
        useBtn = new JButton("use");
            useBtn.addMouseListener(new MouseAdapter() {
                @Override
                public void mouseClicked(MouseEvent e)
                {
                    //Execute when button is pressed
                    //clear the StringBuilder
                    commandBuilder.delete(0, commandBuilder.length());
                    //append use value
                    commandBuilder.append("use");
                    inputTextField.setText(commandBuilder.toString());
                    
                    //Because Book and Keys are items that are used without second parameter,
                    //append and execute if found as selected item in the Inventory.
                    if (inventoryList.getSelectedValue() != null)
                    {
                        String nameOfItem = inventoryList.getSelectedValue().toString();
                        if (nameOfItem.equals("keys") || nameOfItem.equals("book"))
                        {
                            appendAndExecute(nameOfItem);   //also clears the Builder
                        }
                        else if (nameOfItem.equals("bat") || nameOfItem.equals("sword"))
                        {
                            commandBuilder.append(" ").append(nameOfItem);
                            inputTextField.setText(commandBuilder.toString());
                        }
                    }
                }
            });
        talkBtn = new JButton("talk");
            talkBtn.addMouseListener(new MouseAdapter() {
                @Override
                public void mouseClicked(MouseEvent e)
                {
                    //Execute when button is pressed
                    //clear the StringBuilder
                    commandBuilder.delete(0, commandBuilder.length());
                    //append pick value
                    commandBuilder.append("talk");
                    inputTextField.setText(commandBuilder.toString());
                }
            });
        helpBtn = new JButton("help");
        helpBtn.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e)
            {
                //clear the StringBuilder
                commandBuilder.delete(0, commandBuilder.length());
                //Execute when help button is pressed
                engine.interpretCommand("help");
            }
        });
        musicBtn = new JButton("music");
        musicBtn.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e)
            {
                changeModeMusic();
            }
        });
        
        //initialize Char Labels and assign listeners
        womanLabel = new JLabel();
            womanLabel.addMouseListener(new MouseAdapter()  
                 {  
                    @Override
                     public void mouseClicked(MouseEvent e)  
                     {  
                         constructCommandOfGui("woman", TypeOfObject.CHARACTER.getTypeOfObject());
                     }
                 });
            
        smallDragonLabel = new JLabel();
        smallDragonLabel.addMouseListener(new MouseAdapter()  
             {  
                @Override
                 public void mouseClicked(MouseEvent e)  
                 {  
                     constructCommandOfGui("small_dragon", TypeOfObject.CHARACTER.getTypeOfObject()); 
                 }
             });
        genieLabel = new JLabel();
        genieLabel.addMouseListener(new MouseAdapter()  
             {  
                @Override
                 public void mouseClicked(MouseEvent e)  
                 {  
                     constructCommandOfGui("genie", TypeOfObject.CHARACTER.getTypeOfObject());
                 }
             });
        onyxiaLabel = new JLabel();
        onyxiaLabel.addMouseListener(new MouseAdapter()  
             {  
                @Override
                 public void mouseClicked(MouseEvent e)  
                 {  
                     constructCommandOfGui("onyxia", TypeOfObject.CHARACTER.getTypeOfObject());
                 }
             });
        chestLabel = new JLabel();
        
        keysLabel = new JLabel();
        keysLabel.addMouseListener(new MouseAdapter()  
             {  
                @Override
                 public void mouseClicked(MouseEvent e)  
                 {  
                     //if the StringBuilder is empty do nothing
                     if (commandBuilder.length() == 0)
                         return;
                     appendAndExecute("keys");
                 }
             });
        
        
        batLabel = new JLabel();
        batLabel.addMouseListener(new MouseAdapter()  
             {  
                @Override
                 public void mouseClicked(MouseEvent e)  
                 {  
                     constructCommandOfGui("bat", TypeOfObject.ITEM.getTypeOfObject());
                 }
             });
            
        swordLabel = new JLabel();
        swordLabel.addMouseListener(new MouseAdapter()  
             {  
                @Override
                 public void mouseClicked(MouseEvent e)  
                 {  
                     constructCommandOfGui("sword", TypeOfObject.ITEM.getTypeOfObject());
                 }
             });
        
        bookLabel = new JLabel();
        bookLabel.addMouseListener(new MouseAdapter()  
             {  
                @Override
                 public void mouseClicked(MouseEvent e)  
                 {  
                     if (commandBuilder.length() == 0)
                         return;
                     appendAndExecute("book");
                 }
             });
        
        charIcon = new ImageIcon();
        itemIcon = new ImageIcon();
        
        
        inventoryList = new JList();
        inventoryList.setToolTipText("Your Inventory"); //add tooltip
        
        playerIcon = new ImageIcon(getClass().getResource("/images/player.gif"));
        playerLabel = new JLabel(playerIcon);
        playerpanel = new JPanel();
        inventoryLabel = new JLabel("Inventory:");
        inventoryPanel = new JPanel();
        
        listScrollerPanel = new JPanel();
        
        
        
        makeFrame();
        
    }
    
    /**
     * This function makes the frame of the application. It creates the menus,
     * panels and also adds the components into the panel they belong.
     */
    private void makeFrame()
    {
        
    	setTitle("Onyxia App");
    	
    	setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        
    	//build the menu
    	buildMenuBar(this);

        this.setLocation(300, 10); //set the location of the frame
    	contentPane = this.getContentPane(); //gets contentPane from frame

        contentPane.setLayout(new FlowLayout(FlowLayout.LEFT, 1, 1));
        //create the left and right panels and start adding components
        leftPanel = new JPanel();
        rightPanel = new JPanel();

        contentPane.add(leftPanel);
        contentPane.add(rightPanel);

        
    	startingLocationURL = "/images/outdoors-600.png";
    	mainpanel = new ImagePanel(startingLocationURL);
    	mainpanel.setPreferredSize(new Dimension(600,450));
        
        mainpanel.setBorder(BorderFactory.createLineBorder(Color.GRAY));
        
    	//The text area that displays the output.
    	outputTextArea = new JTextArea();
    	outputTextArea.setEditable(false);
        scrollPaneOutput = new JScrollPane(outputTextArea);
        
        scrollPaneOutput.setPreferredSize(new Dimension(600,150));
        outputTextArea.setLineWrap(true);
        outputTextArea.setWrapStyleWord(true);
        
        
    	
    	//Key Listener for Input
    	regularL = new regularKeyListener();
    	inputTextField.addKeyListener(regularL);
        inputTextField.setPreferredSize(new Dimension(600,20));
        
        leftPanel.setLayout(new BoxLayout(leftPanel, BoxLayout.PAGE_AXIS));
        leftPanel.add(mainpanel);
        leftPanel.add(scrollPaneOutput);
        leftPanel.add(inputTextField);

        //create a gridlayout with 3 rows, 2 columns and space between them
        GridLayout buttonsGridLayout = new GridLayout(3, 2, 5, 5);
        buttonsPanel.setLayout(buttonsGridLayout);
        //only height matters due to boxlayout
        buttonsPanel.setPreferredSize(new Dimension(150,110));
        
        buttonsPanel.add(goBtn);
        buttonsPanel.add(pickBtn);
        buttonsPanel.add(useBtn);
        buttonsPanel.add(talkBtn);
        buttonsPanel.add(helpBtn);
        buttonsPanel.add(musicBtn);
        
        //JList inventory properties
        inventoryList.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        inventoryList.setLayoutOrientation(JList.VERTICAL);
        //reset visible rows to 0, because this functionality is handled by the scroller
        inventoryList.setVisibleRowCount(-1);
        
        listScroller = new JScrollPane(inventoryList);
        listScroller.setPreferredSize(new Dimension(200, 150));
        listScrollerPanel = new JPanel();
        
        listScrollerPanel.setLayout(new BoxLayout(listScrollerPanel, BoxLayout.PAGE_AXIS));
        
        inventoryPanel.add(inventoryLabel);
        inventoryPanel.setLayout(new FlowLayout(FlowLayout.LEFT));
        listScrollerPanel.add(inventoryPanel);
        listScrollerPanel.add(listScroller);
        rightPanel.setLayout(new BoxLayout(rightPanel, BoxLayout.PAGE_AXIS));
        
        playerpanel.add(playerLabel);
        Dimension dz = new Dimension(listScroller.getWidth(),50);
        
        rightPanel.add(buttonsPanel);
        rightPanel.add(new Box.Filler(new Dimension(5,5), dz, dz));
        rightPanel.add(listScrollerPanel);
        
        rightPanel.add(new Box.Filler(new Dimension(5,5), dz, dz));
        rightPanel.add(playerpanel);
        
    	pack();
    	setVisible(true);
    	
    }
    
    
    /**
     * When changing room this function is called in order to paint the correct
     * components in the next room.
     * @param nextRoom The Room object that will follow.
     */
    public void changeRoom(Room nextRoom)
    {
        String imagePath = nextRoom.getRoomImagePath();
        String charImagePath;
        String itemImagePath;
        //remove all from the mainpanel
        mainpanel.removeAll();
        mainpanel.setLayout(null);
        
        
        //draw the characters if exist
        if (nextRoom.getRoomChar() != null && nextRoom.getRoomChar().isAlive() == true)
        {
            Character roomChar = nextRoom.getRoomChar();  //get room char
            charImagePath = roomChar.getCharImagePath(); //get room char path
            
            //draw the character and add it to the panel
            charIcon = new ImageIcon(getClass().getResource(charImagePath));
            //Set the corresponding ImageIcon and set if the label is visible
            //name is used as identifier
            setIconPositionAndVisibility(roomChar.getName(), charIcon, true);
        }
        
        //draw the items if exist any
        if (!nextRoom.getItems().isEmpty())
        {
            HashSet<Item> items = nextRoom.getItems();
            
            for (Item itemToDisplay : items)
            {
                itemImagePath = itemToDisplay.getItemURL();
                itemIcon = new ImageIcon(getClass().getResource(itemImagePath));
                if (itemToDisplay.getName().equals("keys"))
                {
                    setIconPositionAndVisibility(itemToDisplay.getName(), itemIcon, true);
                }
                else if (itemToDisplay.getName().equals("bat"))
                {
                    setIconPositionAndVisibility(itemToDisplay.getName(), itemIcon, true);
                }
                else if (itemToDisplay.getName().equals("sword"))
                {
                    setIconPositionAndVisibility(itemToDisplay.getName(), itemIcon, true);
                }
                else if (itemToDisplay.getName().equals("book"))
                {
                    setIconPositionAndVisibility(itemToDisplay.getName(), itemIcon, true);
                }
                else if (itemToDisplay.getName().equals("chest"))
                {
                    setIconPositionAndVisibility(itemToDisplay.getName(), itemIcon, false);
                }
                
            }
            
        }

        mainpanel.setImagePath(imagePath);
        pack();
    }
    
    
    
    /**
     * Build the menu and add it to the frame.
     * 
     * @param frame The frame in which the menu bar will be built.
     */
    private void buildMenuBar(JFrame frame)
    {
    	JMenuBar menubar = new JMenuBar();
    	frame.setJMenuBar(menubar);
    	
    	//create the file menu
    	JMenu filemenu = new JMenu("File");
    	menubar.add(filemenu);
        
        //create the About menu
        JMenu aboutmenu = new JMenu("Help");
        menubar.add(aboutmenu);
        
        JMenuItem helpmenuitem = new JMenuItem("Game Help");
        //create the ActionListener for help menu item
    	helpmenuitem.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) { engine.printHelpWrapper(); }
        });
        aboutmenu.add(helpmenuitem);    //add it
        
                
        JMenuItem aboutDeveloperMenuItem = new JMenuItem("About Onyxia");
        //create the ActionListener for about developer menu item
        aboutDeveloperMenuItem.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) { 
                String msg = "Onyxia\nVersion 1.0\nRelease date: November 30th\n\nThis game was developed by "
                        + "student Michael Vogiatzis under the Java course";
                printMessageBox(msg, "About Onyxia", JOptionPane.DEFAULT_OPTION); }
        });
    	aboutmenu.add(aboutDeveloperMenuItem);
        
    	JMenuItem quit = new JMenuItem("Quit");
    	filemenu.add(quit);
    	
    	//create the ActionListener for Quit menu item
    	quit.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) { quit(); }
        });
    	filemenu.add(quit);
    } 
    
    
    /*
     * This is a Key listener to be used as the KeyListener of input textfield.
     */
    class regularKeyListener implements KeyListener
    {
        String humanRemark;
        String chatbotreply;
        
        @Override
    	public void keyPressed(KeyEvent e)
	{
            if(e.getKeyCode() == KeyEvent.VK_ENTER && chatModeEnabled == false){  
                    //go to parser

                    commandtext = inputTextField.getText();
                    inputTextField.setText("");
                    engine.interpretCommand(commandtext);
                    return;
            }
            if (e.getKeyCode() == KeyEvent.VK_ENTER && chatModeEnabled == true)
            {
                humanRemark = inputTextField.getText();
                println(humanRemark);
                if (humanRemark.toLowerCase().equals("bye"))
                {
                    println("May the light be with you! Goodbye!");
                    inputTextField.setText("");
                    chatModeEnabled = false;    //mark end of conversation
                    println("You left the chat mode.");
                    return;
                }

                //Here the user did not enter bye, so generate a reply and print it
                //WARNING: getReplyfromChatbot may return null from the engine if user leaves
                //room while chatting, so then disable the chat and interpret his command
                //To ensure that nullpointer will not be thrown, I disable chat Mode in gameEngine 
                //every time he leaves a room.
                chatbotreply = engine.getReplyfromChatbot(humanRemark.toLowerCase());
                if (chatbotreply.equals("Here is your fire protection chest! Take care!"))
                {
                    engine.addToArmorSet("Fire Protection Chest");  //wear the item
                    engine.increaseFireResistance(20);
                    printMessageBox("You now wear a fire protection chest !", "Armor set received", 
                            JOptionPane.PLAIN_MESSAGE);
                }
                inputTextField.setText("");
                println(chatbotreply);
                return;


            }
	}
        @Override
	public void keyReleased(KeyEvent e)
	{
            //do nothing
	}
        @Override
	public void keyTyped(KeyEvent e)
	{
            //do nothing
	}
    }
    
    /**
     * It constructs the command. If the command is complete it passes it to the engine,
     * otherwise it appends to the StringBuilder.
     * @param thingName String The name of the thing
     * @param typeOfThing The type of the thing
     */
    private void constructCommandOfGui(String thingName, int typeOfThing)
    {
        //If the thing type is an ITEM, construct the command for Items
        //and pass it to the engine if it is complete
        if (typeOfThing == TypeOfObject.ITEM.getTypeOfObject())
        {
            if (commandBuilder.length() == 0)
                return;
                         
            String commandBuilderText = commandBuilder.toString();
            if (commandBuilderText.equals("pick") || commandBuilderText.equals("talk"))
            {
               appendAndExecute(thingName); //function that appends the string and executes the command
            }
            else if (commandBuilderText.contains("use"))
            {
                StringTokenizer tokenizer = new StringTokenizer(commandBuilder.toString());
                //this is to ensure that the itemName will not be appended more than one times
                if (!(tokenizer.countTokens() > 1))
                {    
                    commandBuilder.append(" ").append(thingName);
                    inputTextField.setText(commandBuilder.toString());
                }
            }
        }
        //If the thing type is a CHARACTER, construct the command for Characters
        //and pass it to the engine if it is complete
        else if (typeOfThing == TypeOfObject.CHARACTER.getTypeOfObject())
        {
            if (commandBuilder.length() == 0)
                             return;
                         
             String commandBuilderText = commandBuilder.toString();
             if (commandBuilderText.contains("use"))
             {
                 if (inventoryList.getSelectedValue() != null)
                 {
                     //commandBuilder.append(" ").append(inventoryList.getSelectedValue().toString());
                     appendAndExecute(thingName);
                 }
                 else
                 {
                     println("You have not selected an item from your inventory!");
                     commandBuilder.delete(0, commandBuilder.length());
                     inputTextField.setText("");
                 }
             }
             else if (commandBuilderText.equals("talk"))
             {
                 appendAndExecute(thingName);
             }
        }
    }
    /**
     * Set the label's Image Icon, the label position and if it is visible,
     * according to the name of the Label.
     * @param labelName String The label's name as unique identifier
     * @param imgicon ImageIcon The ImageIcon to be set
     * @param isVisible boolean True if the label is visible, false if not
     */
    private void setIconPositionAndVisibility(String labelName, ImageIcon imgicon, boolean isVisible)
    {
        //"woman" 80,50, "smallDragon" 240,250,   "genie" 280,150, "onyxia" 0,0
        if (labelName.equals("woman"))
        {
            womanLabel.setIcon(imgicon);
            mainpanel.add(womanLabel);
            womanLabel.setBounds(80,50, imgicon.getIconWidth(), imgicon.getIconHeight());
            womanLabel.setVisible(isVisible);
        }
        else if (labelName.equals("small_dragon"))
        {
            smallDragonLabel.setIcon(imgicon);
            mainpanel.add(smallDragonLabel);
            smallDragonLabel.setBounds(260,250, imgicon.getIconWidth(), imgicon.getIconHeight());
            smallDragonLabel.setVisible(isVisible);
        }
        else if (labelName.equals("genie"))
        {
            genieLabel.setIcon(imgicon);
            mainpanel.add(genieLabel);
            genieLabel.setBounds(280,150, imgicon.getIconWidth(), imgicon.getIconHeight());
            genieLabel.setVisible(isVisible);
        }
        else if (labelName.equals("onyxia"))
        {
            onyxiaLabel.setIcon(imgicon);
            mainpanel.add(onyxiaLabel);
            onyxiaLabel.setBounds(0,0, imgicon.getIconWidth(), imgicon.getIconHeight());
            onyxiaLabel.setVisible(isVisible);
        }
        
        if (labelName.equals("keys"))
        {
            keysLabel.setIcon(imgicon);
            mainpanel.add(keysLabel);
            keysLabel.setBounds(125,315, imgicon.getIconWidth(), imgicon.getIconHeight());
            keysLabel.setVisible(isVisible);
        }
        else if (labelName.equals("bat"))
        {
            batLabel.setIcon(imgicon);
            mainpanel.add(batLabel);
            batLabel.setBounds(253,131, imgicon.getIconWidth(), imgicon.getIconHeight());
            batLabel.setVisible(isVisible);
        }
        else if (labelName.equals("sword"))
        {
            swordLabel.setIcon(imgicon);
            mainpanel.add(swordLabel);
            swordLabel.setBounds(20,230, imgicon.getIconWidth(), imgicon.getIconHeight());
            swordLabel.setVisible(isVisible);
        }
        else if (labelName.equals("book"))
        {
            bookLabel.setIcon(imgicon);
            mainpanel.add(bookLabel);
            bookLabel.setBounds(495,195, imgicon.getIconWidth(), imgicon.getIconHeight());
            bookLabel.setVisible(isVisible);
        }
        else if (labelName.equals("chest"))
        {
            chestLabel.setIcon(imgicon);
            mainpanel.add(chestLabel);
            chestLabel.setBounds(170,150, imgicon.getIconWidth(), imgicon.getIconHeight());
            chestLabel.setVisible(isVisible);
        }
                
                    
        
    }
    
                
    /**
     * Set the Chat Mode on or off
     * @param bo boolean True if it is on, false if off.
     */
    public void setChatModeEnabled(boolean bo)
    {
        this.chatModeEnabled = bo;
    }
    
    /**
     * Changes the mode of the music and starts or stop playing it.
     */
    private void changeModeMusic()
    {
        musicMode = !musicMode;
        if (musicMode)
            backgroundFilePlayer.startPlaying();
        else
            backgroundFilePlayer.stopPlaying();
    }
    
    /**
     * Plays the sound effect of dragons roar if the music mode is on.
     * @param soundType int It is used to choose the correct .wav file to play 
     * using the SoundType enumerator
     */
    public void playSoundEffect(int soundType)
    {
        //don't play anything if music mode is off
        if (!musicMode)
            return;
        //Now play the wav according to the parameter soundType
        if (soundType == SoundType.ONYXIA.getSoundType())
        {
            try {
                soundEffectPlayer = new SoundFilePlayer(getClass().getResource("/sounds/dragonsRoar.wav"));
                soundEffectPlayer.startPlaying();
            } catch (IOException ex) {
                ex.printStackTrace(System.err);
            } catch (UnsupportedAudioFileException ex) {
                ex.printStackTrace(System.err);
            } catch (LineUnavailableException ex) {
                ex.printStackTrace(System.err);
            }
        }
        else if (soundType == SoundType.GAMEOVER.getSoundType())
        {
            try {
                soundEffectPlayer = new SoundFilePlayer(getClass().getResource("/sounds/gameover.wav"));
                soundEffectPlayer.startPlaying();
            } catch (IOException ex) {
                ex.printStackTrace(System.err);
            } catch (UnsupportedAudioFileException ex) {
                ex.printStackTrace(System.err);
            } catch (LineUnavailableException ex) {
                ex.printStackTrace(System.err);
            }
        }
        else if (soundType == SoundType.VICTORY.getSoundType())
        {
            try {
                soundEffectPlayer = new SoundFilePlayer(getClass().getResource("/sounds/victory.wav"));
                soundEffectPlayer.startPlaying();
            } catch (IOException ex) {
                ex.printStackTrace(System.err);
            } catch (UnsupportedAudioFileException ex) {
                ex.printStackTrace(System.err);
            } catch (LineUnavailableException ex) {
                ex.printStackTrace(System.err);
            }
        }
        else if (soundType == SoundType.SCREAM.getSoundType())
        {
            try {
                soundEffectPlayer = new SoundFilePlayer(getClass().getResource("/sounds/scream.wav"));
                soundEffectPlayer.startPlaying();
            } catch (IOException ex) {
                ex.printStackTrace(System.err);
            } catch (UnsupportedAudioFileException ex) {
                ex.printStackTrace(System.err);
            } catch (LineUnavailableException ex) {
                ex.printStackTrace(System.err);
            }
        }
        else if (soundType == SoundType.BACKGROUNDMUSIC.getSoundType())
        {
            try {
            backgroundFilePlayer = new SoundFilePlayer(getClass().getResource("/sounds/backgroundMusic.wav"));
            backgroundFilePlayer.startPlaying();
            LineListener ll = new LineListener() {
                @Override
                public void update(LineEvent le) {
                    if (le.getType() == LineEvent.Type.CLOSE)
                    {
                        //if reached EOF then play it again
                        if (backgroundFilePlayer.reachedEOF())
                        {
                           try {
                                //loop it !
                                backgroundFilePlayer = new SoundFilePlayer(getClass().getResource("/sounds/backgroundMusic.wav"));
                                backgroundFilePlayer.startPlaying();
                                backgroundFilePlayer.getLine().addLineListener(this);
                            } catch (IOException ex) {
                                ex.printStackTrace(System.err);
                            } catch (UnsupportedAudioFileException ex) {
                                ex.printStackTrace(System.err);
                            } catch (LineUnavailableException ex) {
                                ex.printStackTrace(System.err);
                            }
                        }          
                    }
                }
            };
            backgroundFilePlayer.getLine().addLineListener(ll);
        } catch (IOException ex) {
            ex.printStackTrace(System.err);
        } catch (UnsupportedAudioFileException ex) {
            ex.printStackTrace(System.err);
        } catch (LineUnavailableException ex) {
            ex.printStackTrace(System.err);
        } catch (NullPointerException np) {
            np.printStackTrace(System.err);
        }
        }
        
    }
    
    
    /**
     * Add a new popup menu with a listener that appends the passed string to
     * the String buffer.
     * @param popupmenu The JPopupMenu object in which MenuItem with listener 
     * will be added
     * @param string The string that indicates the text of the MenuItem. It needs
     * to be final to append it.
     */
    private void addListener(JPopupMenu popupmenu, final String direction) {
        popupmenu.add(new JMenuItem(new AbstractAction(direction) {
            @Override
            public void actionPerformed(ActionEvent e) {
                commandBuilder.append(" ").append(direction);
                engine.interpretCommand(commandBuilder.toString());
                //clear the StringBuilder
                commandBuilder.delete(0, commandBuilder.length());
                inputTextField.setText(commandBuilder.toString());
            }
        }));
    }
    
    /**
     * Appends the string to the StringBuilder and executes. Then clears the StringBuilder
     * @param stringToAppend String The string to be appended in the command builder.
     */
    private void appendAndExecute(String stringToAppend)
    {
        commandBuilder.append(" ").append(stringToAppend);
        inputTextField.setText(commandBuilder.toString());
        engine.interpretCommand(commandBuilder.toString());
        //clear the StringBuilder
        commandBuilder.delete(0, commandBuilder.length());
        inputTextField.setText(commandBuilder.toString());
    }
    
    /**
     * Refresh the inventory to add or remove items from it.
     */
    public void refreshInventory(Player pl)
    {
        //remove all the items from the inventory List
        inventoryList.removeAll();
        
        HashSet<Item> newitems = new HashSet<Item>();
        newitems = pl.getInventory();
        String[] itemname = new String[newitems.size()];
        int i=0;
        for (Item newitem : newitems)
        {
            itemname[i] = newitem.getName();
            i++;
        }
        inventoryList.setListData(itemname);
    }

    
    
    /**
     * Shows or hides an item in the room according to the name
     * 
     * @param itemName String The name of the item
     * @param isVisible boolean True to show it, false to hide it.
     */
    public boolean showItemChar(String itemName, boolean isVisible)
    {
        boolean found = false;
        if (itemName.equals("chest"))
        {
            chestLabel.setVisible(isVisible);
            found = true;
        }
        else if (itemName.equals("keys"))
        {
            keysLabel.setVisible(isVisible);
            found = true;
        }
        else if (itemName.equals("bat"))
        {
            batLabel.setVisible(isVisible);
            found = true;
        }
        else if (itemName.equals("sword"))
        {
            swordLabel.setVisible(isVisible);
            found = true;
        }
        else if (itemName.equals("book"))
        {
            bookLabel.setVisible(isVisible);
            found = true;
        }
        else if (itemName.equals("onyxia"))
        {
            onyxiaLabel.setVisible(isVisible);
            found = true;
        }
        else if (itemName.equals("woman"))
        {
            womanLabel.setVisible(isVisible);
            found = true;
        }
        else if (itemName.equals("small_dragon"))
        {
            smallDragonLabel.setVisible(isVisible);
            found = true;
        }
        
        
        return found;
    }

    
    /**
     * Set the focus on the input text field
     */
    public void setFocusInput()
    {
        inputTextField.requestFocusInWindow();
    }
    
    /*
     * Print a message box with the specified message 'msg'
     * @param msg The String message to display
     * @param kindOfMessage The kind of message to display i.e. Error message
     * @param The title of the message dialog window
     */
    public void printMessageBox(String msg, String boxTitle, int kindOfMessage)
    {
        try
        {
            JOptionPane.showMessageDialog(this,msg, boxTitle , kindOfMessage);
        }
        catch(HeadlessException hed)
        {
            println("Graphics environment is headless!");
        }
    }
    /**
     * Displays a question, and the player has to decide whether to continue
     * fighting or go back and leave the room.
     * 
     * @param msg The question that the player has to answer
     * @return boolean True if user selected Yes, false if not.
     */
    public boolean printDialog(String msg)
    {
        Object[] options = {"Yes, fight her !",
                    "No, I want to go back !"};
    int n = JOptionPane.showOptionDialog(this,
    msg + "\n\nDo you want to continue fighting ?",
    "Brave decision",
    JOptionPane.YES_NO_OPTION,
    JOptionPane.QUESTION_MESSAGE,
    null,     //do not use a custom Icon
    options,  //the titles of buttons
    options[0]); //default button title
    
    return (n == JOptionPane.YES_OPTION);
    }
    
    /**
     * Disable the graphical user interface
     */
    public void freezeInterface()
    {
        buttonsPanel.removeAll();
        inputTextField.setEditable(false);
        pack();
    }
    
    /**
     * Quit function: quit the Frame.
     */
    public void quit()
    {
        WindowEvent wev = new WindowEvent(this, WindowEvent.WINDOW_CLOSING);
        Toolkit.getDefaultToolkit().getSystemEventQueue().postEvent(wev); //also disposes
    }
    
    /**
     * Prints the message to the output TextArea
     * @param commandLine String the message to be printed out.
     */
    public void println(String commandLine) {
        //System.out.println(commandLine);
    	outputTextArea.append(commandLine + "\n");
        //set to bottom
        outputTextArea.setCaretPosition(outputTextArea.getDocument().getLength());
    }

}
